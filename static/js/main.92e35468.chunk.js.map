{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortField","setSortField","isReverse","setIsReverse","visibleGoods","goods","preparedGoods","sort","goodA","goodB","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAA6B,CACxC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,kBAAAA,E,oBAAAA,E,iBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAmBH,EAASI,SAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCH,oBAAkB,GAApD,mBAAOI,EAAP,KAAkBC,EAAlB,KACMC,EA/BR,SACEC,EADF,GAGa,IADTL,EACQ,EADRA,UAAWE,EACH,EADGA,UAEPI,EAAa,YAAOD,GAqB1B,OAnBIL,IAAcL,EAASI,SACzBO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAMwBS,CAAiBnB,EAC9C,CAAEI,YAAWE,cAEf,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYlB,IAAcL,EAASe,WAErCS,QAAS,kBAAMlB,EAAaN,EAASe,WALvC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYlB,IAAcL,EAASiB,SAErCO,QAAS,kBAAMlB,EAAaN,EAASiB,SALvC,4BAUA,wBACEK,KAAK,SACLE,QAAS,kBAAMhB,GAAcD,IAC7Bc,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAahB,IAJjB,sBAUEF,IAAcL,EAASI,SAAWG,IAClC,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPlB,EAAaN,EAASI,SACtBI,GAAa,IALjB,sBAaJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC/GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.92e35468.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer : string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Default = 'default',\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n\ninterface SortFields {\n  sortField: SortType,\n  isReverse: boolean,\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReverse } :SortFields,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField !== SortType.Default) {\n    preparedGoods.sort((goodA, goodB) => {\n      switch (sortField) {\n        case SortType.Alphabet:\n          return goodA.localeCompare(goodB);\n\n        case SortType.Length:\n          return goodA.length - goodB.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortType>(SortType.Default);\n  const [isReverse, setIsReverse] = useState<boolean>(false);\n  const visibleGoods: string[] = getPreparedGoods(goodsFromServer,\n    { sortField, isReverse });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortType.Alphabet,\n          })}\n          onClick={() => setSortField(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortType.Length,\n          })}\n          onClick={() => setSortField(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReverse(!isReverse)}\n          className={cn('button', 'is-warning', {\n            'is-light': !isReverse,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField !== SortType.Default || isReverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField(SortType.Default);\n              setIsReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}